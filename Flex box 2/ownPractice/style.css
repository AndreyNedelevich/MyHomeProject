
* {
    /*box-sizing: border-box;*/
    /*    При указании даного свойства все внутрение отступы будут учтенны в общий размер блока и он не
    будет выходить за рамки указанной ширины*/
    /*   Лучше данное свойсто использовать в каждом конкретном блоке.*/
}

body {
    margin: 0;
}

/*Это флекс контейнер Он монипулирует наследниками. */
.wrap {
    height: 1000px;
    background: silver;
    display: flex;
    flex-direction: row;
    /*Стоит по дефолту */
    /*flex-direction: column;*/
    /*Мы меняем отображение отображение элементов по вериткальной оси Так как меняеться напрвление оси но команды остаеть
    теже самыми*/
    justify-content:flex-start;
    /*Выравнивания по основной оси (горизонтальной)*/
    /*align-items: flex-start;*/
    /*Выравнивания по попречной оси  оси (вертикальной)*/

    flex-wrap: wrap;
/*Если количество блоков добавляеться или они не помещаются в заданный размер при помощи этого свойства переносяться на следующую строку*/
}

h2 {
    margin: 0;
}

.box {
    background: cornflowerblue;
    width: 300px;
    height: 200px;
    /*margin: 10px;*/
    margin-right: calc(16.6% - 150px);
    margin-left: calc(16.6% - 150px);

}

/*Если мы хотим застелизовать какой то конкретный элемент Используем псевдокласс nth-child(1) Отдельный элемент будет другого цвета.*/
.box:nth-child(1) {
    background: indianred;
    order: 2;
    /*При помощи order мы можем изменять порядое отображения элементов (перемещать из по контейнеру ) которые находяться в Флекс контейнере Это свойство
    определяет вес наследника в Флекс боксе чем он тяжелее (по нумерации его нужно передвинуть вначало)    */
}
/*Если в nth-child указать  (3n+1) это будет означать что стили будут примененны каждому тертьему элементу начиная с первого*/
.box:nth-child(2) {
    background: rgba(0, 0, 0, .5);
    /*order: 1;*/
}

.box:nth-child(3) {
    background: orangered;
    /*order: 2;*/
}


/*.xxx {*/
/*    display: flex;*/
/*}*/

/*.xxx > p {*/
/*    margin: 0;*/
/*}*/